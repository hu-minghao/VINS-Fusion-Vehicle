%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 1mu 1cam 1dep
imu: 0
num_of_cam: 1
depth: 1  

imu_topic: "/camera/imu"
image0_topic: "/camera/color/image_raw"
image1_topic: "/camera/aligned_depth_to_color/image_raw"
odom_topic: "/odom_wheel/odom"
output_path: "/home/nvidia/SLAM_CODE/VINS/output"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam0_pinhole.yaml"
image_width: 640
image_height: 480
min_loop_match_num: 25
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic:0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [1, 0, 0, 0.0424947,
           0, 1, 0,0.02858,
           0,  0, 1,-0.0019294,
           0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0,
         0, 1, 0,0,
         0, 0,1,0,
         0, 0, 0, 1]

base_T_cam: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0.4615,
         0, 1, 0,0.019,
         0, 0,1,0.103,
         0, 0, 0, 1]

#Multiple thread support
multiple_thread: 0

#feature traker paprameters
max_cnt: 160            # max feature number in feature tracking 160
min_dist: 20            # min distance between two features 15
freq: 5              # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 10 
F_threshold: 1.0        # ransac threshold (pixel) 1.0
show_track: 0           # publish tracking image as topic 1
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy 1

#optimization parameters
max_solver_time: 0.4  # max solver itration time (ms), to guarantee real time
max_num_iterations: 1000   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel) 10

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.02 #2.9840535876578939e-02          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.005 #4.8602774318549456e-03         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.02 #9.2450042830019173e-03        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-5 #3.0172667291423203e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81       # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: -0.062    

#running model paramters: location/mapping
agv_model: location
keyframeWindowSize: 2000                       

#loop closure parameters
load_previous_pose_graph: 1        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/nvidia/SLAM_CODE/VINS/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

load_grid_map: 0
grid_map_save_path: "/home/nvidia/output/build/"

#PCL parameters
depth_dist: 5
depth_boundary: 5
resolution: 0.02
